# -*- coding: utf-8 -*-
"""SOC.final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GgMd1HLJ0UiCwCW6FqB_XypvcC_1gw86
"""

import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import models, transforms
from PIL import Image
import matplotlib.pyplot as plt

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

def image_loader(image_name):
    loader = transforms.Compose([
        transforms.Resize((512,512)),
        transforms.ToTensor()
    ])
    image = Image.open(image_name).convert('RGB')
    image = loader(image).unsqueeze(0)
    return image.to(device, torch.float)

def im_convert(tensor):
    image = tensor.cpu().clone().detach().squeeze(0)
    image = image * torch.tensor([0.229, 0.224, 0.225]).view(3, 1, 1)
    image = image + torch.tensor([0.485, 0.456, 0.406]).view(3, 1, 1)
    image = image.clamp(0, 1)
    return transforms.ToPILImage()(image)

content_layers = ['conv_4']
style_layers = ['conv_1', 'conv_2', 'conv_3', 'conv_4', 'conv_5']

def get_features(image, model, layers=None):
    features = {}
    x = image
    for name, layer in model._modules.items():
        x = layer(x)
        if f'conv_{name}' in layers:
            features[f'conv_{name}'] = x
    return features

def gram_matrix(tensor):
    _, d, h, w = tensor.size()
    tensor = tensor.view(d, h * w)
    return torch.mm(tensor, tensor.t())

content = image_loader("content image.jpg")
style = image_loader("style image.jpg")
input_img = content.clone().requires_grad_(True)

vgg = models.vgg19(pretrained=True).features.to(device).eval()
for param in vgg.parameters():
    param.requires_grad_(False)

content_features = get_features(content, vgg, content_layers)
style_features = get_features(style, vgg, style_layers)
style_grams = {layer: gram_matrix(style_features[layer]) for layer in style_features}

style_weight = 1e5
content_weight = 1e0

optimizer = optim.LBFGS([input_img])

num_steps = 1000
run = [0]
while run[0] <= num_steps:

    def closure():
        optimizer.zero_grad()
        input_features = get_features(input_img, vgg, set(content_layers + style_layers))

        content_loss = torch.mean((input_features['conv_4'] - content_features['conv_4']) ** 2)

        style_loss = 0
        for layer in style_layers:
            target_feature = input_features[layer]
            target_gram = gram_matrix(target_feature)
            style_gram = style_grams[layer]
            _, d, h, w = target_feature.shape
            style_loss += torch.mean((target_gram - style_gram) ** 2) / (d * h * w)

        total_loss = content_weight * content_loss + style_weight * style_loss
        total_loss.backward()

        if run[0] % 50 == 0:
            print(f"Step {run[0]} | Total Loss: {total_loss.item():.4f}")

        run[0] += 1
        return total_loss

    optimizer.step(closure)

final_img = im_convert(input_img)
plt.imshow(final_img)
plt.title("Vanilla Style Transfer Output")
plt.axis('off')
plt.show()

from torchvision.utils import save_image

final_img.save("vanilla_output.png")

